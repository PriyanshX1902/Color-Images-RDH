function [watermarked_image, em_message max_result]=main_encode(original_image,original_message)
%%
% input: image (double), payload (binary)
% output: watermarked image (double)
%%

%Preprocess
[n m]=size(original_image(:, : ,1));

message_length_max=floor(log2(n*m));
length_loc_map_max=ceil(log2((n-2)*(m-2)));

[P_red location_map_red location_map_length_red]=preproces_image(original_image(:, :, 1));
border_pixel_red=mod(P_red(1:message_length_max+6),2);

[P_green location_map_green location_map_length_green]=preproces_image(original_image(:, :, 2));
border_pixel_green=mod(P_green(1:message_length_max+6),2);

[P_blue location_map_blue location_map_length_blue]=preproces_image(original_image(:, :, 3));
border_pixel_blue=mod(P_blue(1:message_length_max+6),2);

message=[border_pixel_red location_map_length_red location_map_red border_pixel_green location_map_length_green location_map_green border_pixel_blue location_map_length_blue location_map_blue original_message];
total_message_length=length(message);
result=zeros(1,44);
em_message = message;

%Encoding
for tau = 0:10
    for mode=1:3
        message = em_message;
        tic
        re_P_red = P_red;
        re_P_green = P_green;
        re_P_blue = P_blue;
        %Preprocess border pixels
        length_per_channel = floor(total_message_length/3);
        bi_message_length=de2bi(length_per_channel, message_length_max);
        bi_message_length_green=de2bi(length_per_channel+mod(total_message_length, 3), message_length_max);
        re_P_red(1:message_length_max+6)=bitxor(bitxor(P_red(1:message_length_max+6),border_pixel_red),[bi_message_length  de2bi(mode,2) de2bi(tau, 4)]);
        re_P_blue(1:message_length_max+6)=bitxor(bitxor(P_blue(1:message_length_max+6),border_pixel_blue),[bi_message_length  de2bi(mode,2) de2bi(tau, 4)]);
        re_P_green(1:message_length_max+6)=bitxor(bitxor(P_green(1:message_length_max+6),border_pixel_green),[bi_message_length_green  de2bi(mode,2) de2bi(tau, 4)]);
        half=0;
        [mod_P_red(:,:,mode*11+tau) ec1]=skewed_histogram_shifting(re_P_red,half,mode,message(1:round(length_per_channel/2)), re_P_green, tau, 1);
        half=1;
        [mod_P_red(:,:,mode*11+tau) ec2]=skewed_histogram_shifting(mod_P_red(:,:,mode*11+tau),half,mode,message(ec1+1:length_per_channel), re_P_green, tau, 1);
        message(1:length_per_channel) = [];
        half=0;
        [mod_P_blue(:,:,mode*11+tau) ec3]=skewed_histogram_shifting(re_P_blue,half,mode,message(1:round(length_per_channel/2)), re_P_green, tau, 2);
        half=1;
        [mod_P_blue(:,:,mode*11+tau) ec4]=skewed_histogram_shifting(mod_P_blue(:,:,mode*11+tau),half,mode,message(ec3+1:length_per_channel), re_P_green, tau, 2);
        message(1:length_per_channel) = [];
        length_per_channel = length_per_channel + mod(total_message_length, 3);
        half=0;
        [mod_P_green(:,:,mode*11+tau) ec5]=skewed_histogram_shifting(re_P_green,half,mode,message(1:round(length_per_channel/2)), mod_P_red(:,:,mode*11+tau), tau, 3);
        half=1;
        [mod_P_green(:,:,mode*11+tau) ec6]=skewed_histogram_shifting(mod_P_green(:,:,mode*11+tau),half,mode,message(ec5+1:end), mod_P_red(:,:,mode*11+tau), tau, 3);
        toc
        if ec1+ec2+ec3+ec4+ec5+ec6 == total_message_length
            disp([num2str(length(em_message)) ' bits embedded!'])
            img_cand = cat(3, mod_P_red(:,:,mode*11+tau), mod_P_green(:,:,mode*11+tau), mod_P_blue(:,:,mode*11+tau));
            disp(['PSNR is ' num2str(psnr(original_image,img_cand,255))])
            result(mode*11+tau)=psnr(original_image,img_cand,255);
        else
            disp('failed')
        end
    end
end

%Find predictor which gives maxmimum psnr
[max_result,max_index]=max(result);
if max_result ~= 0
    watermarked_image=cat(3, mod_P_red(:,:,max_index), mod_P_green(:,:,max_index), mod_P_blue(:,:,max_index));
else
    watermarked_image=[];
    disp('failed')
end